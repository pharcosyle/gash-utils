;;; Gash-Utils
;;; Copyright © 2019 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
;;; Copyright © 2020, 2022 Timothy Sample <samplet@ngyro.com>
;;;
;;; This file is part of Gash-Utils.
;;;
;;; Gash-Utils is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; Gash-Utils is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Gash-Utils.  If not, see <http://www.gnu.org/licenses/>.

* awk
:interpreter: "awk"
:script:
#+begin_src awk
  { print "hello, world" }
#+end_src
:stdin:
#+begin_example
  1
  2
  3
#+end_example
:stdout:
#+begin_example
  hello, world
  hello, world
  hello, world
#+end_example

* awk-2
:script:
#+begin_src sh
  awk -- '{ print "hello, world" };'
#+end_src
:stdin:
#+begin_example
  1
  2
  3
#+end_example
:stdout:
#+begin_example
  hello, world
  hello, world
  hello, world
#+end_example

* awk-array
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      array["foo"]="0"
      array["bar"]="1"
      array["baz"]=""
  
      if ("foo" in array)
          print "have foo"
  
      for (key in array) {
          if (key == "foo") {
              results[3] = key " => " array[key]
          } else if (key == "bar") {
              results[2] = key " => " array[key]
          } else if (key == "baz") {
              results[1] = key " => " array[key]
          }
      }
  
      print results[1]
      print results[2]
      print results[3]
  }
#+end_src
:stdin:
#+begin_example
  foo
  bar
#+end_example
:stdout:
#+begin_example
  have foo
  baz => 
  bar => 1
  foo => 0
#+end_example

* awk-begin-end
:interpreter: "awk"
:script:
#+begin_src awk
  { print foo }
  BEGIN { print "begin"; foo = "bar" }
  END { print "end" }
  BEGIN { print "again"; foo = "baz" }
#+end_src
:stdin:
#+begin_example
  foo
  bar
#+end_example
:stdout:
#+begin_example
  begin
  again
  baz
  baz
  end
#+end_example

* awk-bool
:interpreter: "awk"
:script:
#+begin_src awk
  !a { print "unset:" a; a = !a; print a ":is" "FALSE" }
  a { a = !a; print a ";TRUE"; print }
#+end_src
:stdin:
#+begin_example
  one
  two
#+end_example
:stdout:
#+begin_example
  unset:
  1:isFALSE
  0;TRUE
  one
  unset:0
  1:isFALSE
  0;TRUE
  two
#+end_example

* awk-builtin-length
:interpreter: "awk"
:script:
#+begin_src awk
  {print length ($0); print length (length ($0)) }
#+end_src
:stdin:
#+begin_example
  foo bar baz
#+end_example
:stdout:
#+begin_example
  11
  2
#+end_example

* awk-builtin-split
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      line = "foo @bar@ baz"
      nfields = split(line, field, "@")
      for (i = 1; i < nfields; i++)
          print i ":" field[i]
  }
#+end_src
:stdin:
#+begin_example
  #
#+end_example
:stdout:
#+begin_example
  1:foo 
  2:bar
#+end_example

* awk-builtin-substr
:interpreter: "awk"
:script:
#+begin_src awk
  { print substr ($0, 2, 3) }
  { print (substr ($0, 4)) }
#+end_src
:stdin:
#+begin_example
  foo bar baz
#+end_example
:stdout:
#+begin_example
  oo 
   bar baz
#+end_example

* awk-concat
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      line = "foo"
      value = "bar"
      #line = substr(line, 1, len) "" value "" substr(line, len + keylen + 3)
      line = substr(line, 1, len) "" value "" substr(line, len + keylen + 3)
      print line
  }
#+end_src
:stdin:
#+begin_example
  foo
  bar
#+end_example
:stdout:
#+begin_example
  baro
#+end_example

* awk-configure-subs
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
  S["BASH"]="gash"
  S["MAKE"]="meek"
  S["CC"]="mescc"
  S["LIBS"]=""
    for (key in S) S_is_set[key] = 1
    FS = ""
  
  }
  {
    line = $ 0
    nfields = split(line, field, "@")
    substed = 0
    len = length(field[1])
    for (i = 2; i < nfields; i++) {
      key = field[i]
      keylen = length(key)
      if (S_is_set[key]) {
        value = S[key]
        line = substr(line, 1, len) "" value "" substr(line, len + keylen + 3)
        len += length(value) + length(field[++i])
        substed = 1
      } else
        len += 1 + keylen
    }
  
    print line
  }
#+end_src
:stdin:
#+begin_example
  #! @MAKE@
  BASH=@BASH@ #foobar
  LIBS=@LIBS@
  CC_FOR_BUILD=@CC_FOR_BUILD@
  
  all:
  	@CC@ -o bar bar.c
  
  # end
#+end_example
:stdout:
#+begin_example
  #! meek
  BASH=gash #foobar
  LIBS=
  CC_FOR_BUILD=@CC_FOR_BUILD@
  
  all:
  	mescc -o bar bar.c
  
  # end
#+end_example

* awk-expr
:interpreter: "awk"
:script:
#+begin_src awk
  NR == 1 { print "one" }
  NR == 2 { print "two" }
  NR != 1 && NR != 1 * 2 + 3 * 0 { print "other" }
#+end_src
:stdin:
#+begin_example
  1 2
  1 2 3 4
  1 2 3 4 5
  1 2 3 4 5 6 7 8
  1
#+end_example
:stdout:
#+begin_example
  one
  two
  other
  other
  other
#+end_example

* awk-fields
:interpreter: "awk"
:script:
#+begin_src awk
  {print $0}
  {print $1}
  {print $10}
  {print $NF}
#+end_src
:stdin:
#+begin_example
  foo bar baz
#+end_example
:stdout:
#+begin_example
  foo bar baz
  foo
  
  baz
#+end_example

* awk-if
:interpreter: "awk"
:script:
#+begin_src awk
  { if (1) print "1:" $0 }
  { if (0) { print "0:" $0 } else print "false" }
#+end_src
:stdin:
#+begin_example
  foo
  bar
#+end_example
:stdout:
#+begin_example
  1:foo
  false
  1:bar
  false
#+end_example

* awk-match
:interpreter: "awk"
:script:
#+begin_src awk
  $0 ~ /^#!/ && NR == 1 { print "#! be bang" }
  $0 !~ /^#/ && NF == 3 { print "!#" }
  /^[^#]/ { print }
  
#+end_src
:stdin:
#+begin_example
  #!foo
  #foo foo foo
  bar bar bar
#+end_example
:stdout:
#+begin_example
  #! be bang
  !#
  bar bar bar
#+end_example

* awk-nfset
:interpreter: "awk"
:script:
#+begin_src awk
  { NF = 5 ; print }
#+end_src
:stdin:
#+begin_example
  1 2
  1 2 3 4
  1 2 3 4 5
  1 2 3 4 5 6 7 8
  1
#+end_example
:stdout:
#+begin_example
  1 2   
  1 2 3 4 
  1 2 3 4 5
  1 2 3 4 5
  1    
#+end_example

* awk-re
:interpreter: "awk"
:script:
#+begin_src awk
  /foo/ { print }
  /bar/ { print "bla" }
#+end_src
:stdin:
#+begin_example
  foo
  bar
  baz
#+end_example
:stdout:
#+begin_example
  foo
  bla
#+end_example

* Prefix increment
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      n = 0
      print ++n
      print n
  }
#+end_src
:stdout:
#+begin_example
  1
  1
#+end_example

* Prefix decrement
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      n = 1
      print --n
      print n
  }
#+end_src
:stdout:
#+begin_example
  0
  0
#+end_example

* Addition assignment
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      n = 1
      n += 1
      print n
  }
#+end_src
:stdout:
#+begin_example
  2
#+end_example

* Addition assignment precedence
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      n = 1
      n += 1 + 1
      print n
  }
#+end_src
:stdout:
#+begin_example
  3
#+end_example

* An array cannot be replaced by a scalar
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      xs[1] = 0
      xs = 0
  }
#+end_src
:status: 1

* An array cannot be aliased
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      xs[1] = 0
      ys = xs
  }
#+end_src
:status: 1

* A scalar cannot be replaced by an array
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      x = 0
      xs[1] = 0
      x = xs
  }
#+end_src
:status: 1

* A built-in cannot be replaced by a value
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      index = 1
  }
#+end_src
:status: 1

* A function cannot be replaced by a value
:interpreter: "awk"
:script:
#+begin_src awk
  function foo () {
      print "hi!"
  }
  BEGIN {
      foo = 1
  }
#+end_src
:status: 1

* A built-in cannot be replaced by a function
:interpreter: "awk"
:script:
#+begin_src awk
  function index () {
      print "hi!"
  }
  BEGIN {
      index()
  }
#+end_src
:status: 1

* A function cannot be replaced by a function
:interpreter: "awk"
:script:
#+begin_src awk
  function foo () {}
  function foo () {}
  BEGIN {
      foo()
  }
#+end_src
:status: 1

* Accessing an undefined variable as a scalar does not set it
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      print x + 0
      print "foo" x "bar"
  }
#+end_src
:stdout:
#+begin_example
  0
  foobar
#+end_example

* Accessing an undefined variable as a scalar makes it a scalar
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      print x + 0
      x[1] = "foo"
      print x[1]
  }
#+end_src
:status: 1

* Accessing an undefined variable as an array makes it an array
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      print xs[42]
      print xs + 0
  }
#+end_src
:status: 1

* Checking membership in an undefined variable makes it an array
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      print 42 in xs
      print xs + 0
  }
#+end_src
:status: 1

* Functions can be defined and applied
:interpreter: "awk"
:script:
#+begin_src awk
  function hello () {
      print "hello"
  }
  BEGIN {
      hello()
  }
#+end_src
:stdout:
#+begin_example
  hello
#+end_example

* Function definitions are evaluated first
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      hello()
  }
  function hello () {
      print "hello"
  }
#+end_src
:stdout:
#+begin_example
  hello
#+end_example

* Functions return unspecified values by default
:interpreter: "awk"
:script:
#+begin_src awk
  function f() {}
  BEGIN {
      print "foo" f() "bar-" (f() + 1)
  }
#+end_src
:stdout:
#+begin_example
  foobar-1
#+end_example

* Functions can return values
:interpreter: "awk"
:script:
#+begin_src awk
  function f() {
      return 41
  }
  BEGIN {
      print f() + 1
  }
#+end_src
:stdout:
#+begin_example
  42
#+end_example

* Functions can receive scalar arguments
:interpreter: "awk"
:script:
#+begin_src awk
  function hello(name) {
      print "hello " name
  }
  BEGIN {
      hello("awk")
  }
#+end_src
:stdout:
#+begin_example
  hello awk
#+end_example

* Functions can receive array arguments
:interpreter: "awk"
:script:
#+begin_src awk
  function hello(person) {
      print "hello " person["name"]
  }
  BEGIN {
      awk["name"] = "awk"
      hello(awk)
  }
#+end_src
:stdout:
#+begin_example
  hello awk
#+end_example

* Functions using a scalar as an array is an error
:interpreter: "awk"
:script:
#+begin_src awk
  function hello(person) {
      print "hello " person["name"]
  }
  BEGIN {
      hello("awk")
  }
#+end_src
:status: 1

* Functions using an array as a scalar is an error
:interpreter: "awk"
:script:
#+begin_src awk
  function hello(name) {
      print "hello " name
  }
  BEGIN {
      person["name"] = "awk"
      hello(person)
  }
#+end_src
:status: 1

* Scalar arguments are passed by value
:interpreter: "awk"
:script:
#+begin_src awk
  function hello(name) {
      print "hello " name
      name = "you"
      print "hello " name
  }
  BEGIN {
      name = "awk"
      hello(name)
      print name
  }
#+end_src
:stdout:
#+begin_example
  hello awk
  hello you
  awk
#+end_example

* Array arguments are passed by reference
:interpreter: "awk"
:script:
#+begin_src awk
  function hello(person) {
      print "hello " person["name"]
      person["name"] = "you"
      print "hello " person["name"]
  }
  BEGIN {
      person["name"] = "awk"
      hello(person)
      print person["name"]
  }
#+end_src
:stdout:
#+begin_example
  hello awk
  hello you
  you
#+end_example

* Undefined scalar arguments are passed by value
:interpreter: "awk"
:script:
#+begin_src awk
  function set(name, value) {
      name = value
  }
  BEGIN {
      set(x, "foo")
      print "foo" x "bar"
  }
#+end_src
:stdout:
#+begin_example
  foobar
#+end_example

* Undefined array arguments are passed by reference
:interpreter: "awk"
:script:
#+begin_src awk
  function set(name, key, value) {
      name[key] = value
  }
  BEGIN {
      set(xs, 1, "foo")
      print xs[1]
  }
#+end_src
:stdout:
#+begin_example
  foo
#+end_example

* Function arguments not set during application are uninitialized
:interpreter: "awk"
:script:
#+begin_src awk
  function f(scalar, array) {
      print "foo" scalar "bar"
      for (key in array) {
          print "hi"
      }
      print "foo" array["baz"] "bar"
  }
  BEGIN {
      f()
  }
#+end_src
:stdout:
#+begin_example
  foobar
  foobar
#+end_example

* Functions can be nested
:interpreter: "awk"
:script:
#+begin_src awk
  function make_fancy(name) {
      name = "the venerable " name
      return name
  }
  function greet_with_respect(name) {
      name = "hello to " make_fancy(name)
      print name
  }
  BEGIN {
      greet_with_respect("awk")
  }
#+end_src
:stdout:
#+begin_example
  hello to the venerable awk
#+end_example

* Functions are not dynamically scoped
:interpreter: "awk"
:script:
#+begin_src awk
  function g() {
      print x
      x = "baz"
  }
  function f(x) {
      x = "bar"
      g()
      print x
  }
  BEGIN {
      x = "foo"
      f()
      print x
  }
#+end_src
:stdout:
#+begin_example
  foo
  bar
  baz
#+end_example

* Nested array arguments are passed by reference
:interpreter: "awk"
:script:
#+begin_src awk
  function set(name, key, value) {
      name[key] = value
  }
  function make_greeting(xs) {
      set(xs, 1, "hi")
      return xs[1]
  }
  BEGIN {
      xs[1] = "bye"
      msg = make_greeting()
      print msg
      print xs[1]
  }
#+end_src
:stdout:
#+begin_example
  hi
  bye
#+end_example

* Functions can be recursive
:interpreter: "awk"
:script:
#+begin_src awk
  function fib(n) {
      if (n == 0) {
          return 0
      } else if (n == 1) {
          return 1
      } else {
          return fib(n - 1) + fib(n - 2)
      }
  }
  BEGIN {
      print fib(12)
  }
#+end_src
:stdout:
#+begin_example
  144
#+end_example

* Printf prints characters
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN { printf("%c", "c") }
#+end_src
:stdout: "c"

* Printf treats missing characters as null
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN { printf("%c") }
#+end_src
:stdout: "\0"

* Printf prints the first character from a string
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN { printf("%c", "foo") }
#+end_src
:stdout: "f"

* Printf uses null when treating the empty string as a character
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN { printf("%c", "") }
#+end_src
:stdout: "\0"

* Printf interprets numbers as characters
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN { printf("%c", 97) }
#+end_src
:stdout: "a"

* Handles multi-dimensional arrays
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      foo[1, 2] = "bar"
      if ((1, 2) in foo) {
          print foo[1, 2]
          delete foo[1, 2]
      }
      if ((1, 2) in foo) {
          print "still here!"
      }
  }
#+end_src
:stdout:
#+begin_example
  bar
#+end_example

* Can use ~getline~
:interpreter: "awk"
:script:
#+begin_src awk
  /foo/ { getline; print NR, $0; }
  /baz/ { print NR, $0; }
#+end_src
:stdin:
#+begin_example
  foo
  bar
  baz
#+end_example
:stdout:
#+begin_example
  2 bar
  3 baz
#+end_example

* Can use ~getline~ with a variable
:interpreter: "awk"
:script:
#+begin_src awk
  /foo/ { getline x; print NR, $0, x; }
  /baz/ { print NR, $0; }
#+end_src
:stdin:
#+begin_example
  foo
  bar
  baz
#+end_example
:stdout:
#+begin_example
  2 foo bar
  3 baz
#+end_example

* Redirects input
:interpreter: "awk"
:script:
#+begin_src awk
  /def/ {
      getline < "tests/data/foo";
      print NR, $0;
  }
  END {
      getline < "tests/data/foo";
      print NR, $0;
  }
#+end_src
:stdin:
#+begin_example
  abc
  def
  ghi
#+end_example
:stdout:
#+begin_example
  2 foo
  3 bar
#+end_example

* Redirects input with a variable
:interpreter: "awk"
:script:
#+begin_src awk
  /def/ {
      getline x < "tests/data/foo";
      print NR, $0, x;
  }
  /ghi/ {
      getline x < "tests/data/foo";
      print NR, $0, x;
  }
#+end_src
:stdin:
#+begin_example
  abc
  def
  ghi
#+end_example
:stdout:
#+begin_example
  2 def foo
  3 ghi bar
#+end_example

* Writes and reads from a file
:script:
#+begin_src sh
  awk -v tmpdir="$TEST_TMP" -f -
  cat "$TEST_TMP"/awk;
  rm "$TEST_TMP"/awk;
#+end_src
:stdin:
#+begin_src awk
  BEGIN {
      f = tmpdir "/awk";
      print "hello" > f;
      close(f);
      getline x < f;
      print x;
  }
#+end_src
:stdout:
#+begin_example
  hello
  hello
#+end_example

* Reads from a pipe
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      "echo hello" | getline x;
      print x;
  }
#+end_src
:stdout:
#+begin_example
  hello
#+end_example

* Writes to a pipe
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      print "hello" | "cat - 1>&2"
  }
#+end_src
:stderr:
#+begin_example
  hello
#+end_example

* The ~&&~ and ~||~ operators always return 0 or 1
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      print (42 || 42), ("" || "");
      print (42 && 42), ("" && "");
  }
#+end_src
:stdout:
#+begin_example
  1 0
  1 0
#+end_example

* Handles ~&~ in regex replacements
:interpreter: "awk"
:script:
#+begin_src awk
  BEGIN {
      x = "foo";
      gsub(/f./, "[& &]", x);
      print x;
  }
#+end_src
:stdout:
#+begin_example
  [fo fo]o
#+end_example
